(defun list-buffer-sections()
  (interactive)
  (let* ((buf (buffer-substring-no-properties (point-min)(point-max)))
         (start (string-match "^-" buf 0))
         (pos-list '()))
    (while (not (equal start nil))
      (add-to-list 'pos-list start t)
      (setq start (string-match "^-" buf (1+ start))))
    pos-list))

(defun list-buffer-highlight-current-section ()
  (interactive)
  (let* ((pos-list (list-buffer-sections))
         (cur-index 0)
         (start-pos 0)
         (end-pos 0))
    (while (and (< cur-index (length pos-list)) (> (point) (elt pos-list cur-index)))
      (setq cur-index (1+ cur-index)))
    (setq start-pos (1+ (elt pos-list (1- cur-index))))
    (if (equal cur-index (length pos-list))
        (setq end-pos (point-max))
      (setq end-pos (elt pos-list cure-index)))
    ;; To highlight the region
    ;; (print `(,start-pos ,end-pos))
    ;; (let ((inhibit-modification-hooks t)
    ;;       (old-background (background-color-at-point)))
    ;;   (put-text-property start-pos end-pos 'face '(:background "cyan")))
    (list start-pos end-pos)
    ))

(defun patch-buffer-get-info ()
  (interactive)
  (let* ((section-pos (list-buffer-highlight-current-section))
         (start-pos (car section-pos))
         (end-pos (cadr section-pos))
         (buf-section (buffer-substring-no-properties start-pos end-pos))
         patch-absolute-path patch-file-name project-absolute-path project-relative-path)
    (string-match "\\[\\[\\(.*\\)\\]\\[\\(.*\\)\\]\\]" buf-section 0)
    (setq patch-absolute-path (match-string 1 buf-section)
          patch-file-name (match-string 2 buf-section))
    (string-match "\\[\\[\\(.*\\)\\]\\[\\(.*\\)\\]\\]" buf-section (match-end 2))
    (setq project-absolute-path (match-string 1 buf-section)
          project-relative-path (match-string 2 buf-section))
    (list patch-absolute-path patch-file-name project-absolute-path project-relative-path)))

(defun patch-buffer-apply-patch ()
  (interactive)
  (let* ((patch-info-list (patch-buffer-get-info))
         (patch-absolute-path (elt patch-info-list 0))
         (patch-relative-path (elt patch-info-list 1))
         (project-absolute-path (elt patch-info-list 2))
         (project-relative-path (elt patch-info-list 3)))
    (when (y-or-n-p (format "really apply patch with following info ?\n%s\n%s\n%s\n%s\n"
                          patch-absolute-path
                          patch-relative-path
                          project-absolute-path
                          project-relative-path))
        (shell-command (format "cd %s && git am %s"
                               project-absolute-path patch-absolute-path)))))
(provide 'init-patch-buffer)
