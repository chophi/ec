From 59402cfad16168359ffaa5cc802262b8cc0285e4 Mon Sep 17 00:00:00 2001
From: chophi <chophi@qq.com>
Date: Sun, 5 May 2019 19:26:48 +0800
Subject: [PATCH] Apply opengrok patch.

Signed-off-by: chophi <chophi@qq.com>
---
 elpa/eopengrok-20160904.659/eopengrok.el | 521 +++++++++++++++++++----
 1 file changed, 447 insertions(+), 74 deletions(-)

diff --git a/elpa/eopengrok-20160904.659/eopengrok.el b/elpa/eopengrok-20160904.659/eopengrok.el
index 24fc339..9a66c65 100644
--- a/elpa/eopengrok-20160904.659/eopengrok.el
+++ b/elpa/eopengrok-20160904.659/eopengrok.el
@@ -4,7 +4,7 @@
 
 ;; Author: Youngjoo Lee <youngker@gmail.com>
 ;; Version: 0.5.0
-;; Package-Version: 20160904.659
+;; Package-Version: 20160903.2359
 ;; Keywords: tools
 ;; Package-Requires: ((s "1.9.0") (dash "2.10.0") (magit "2.1.0") (cl-lib "0.5"))
 
@@ -34,23 +34,76 @@
 (require 'etags)
 (require 'magit)
 (require 'cl-lib)
+(require 'pp)
 
 (defvar eopengrok-pending-output nil)
 (defvar eopengrok-last-filename nil)
 (defvar eopengrok-page nil)
 (defvar eopengrok-mode-line-status 'not-running)
-
-(defconst eopengrok-buffer "*eopengrok*")
-(defconst eopengrok-indexing-buffer "*eopengrok-indexing*")
-
+(defconst eopengrok-global-command-buffer-name "*opengrok-commands*")
+
+(defun eopengrok-global-command-buffer ()
+  (get-buffer-create eopengrok-global-command-buffer-name))
+
+(defun eopengrok-set-workspace-var (dir var val)
+  (unless (file-directory-p dir)
+    (error "Dir %s is not exist" dir))
+  (setq dir (file-truename dir))
+  (with-current-buffer (eopengrok-global-command-buffer)
+    (unless (boundp 'eopengrok-hashtab-vars)
+      (setq-local eopengrok-hashtab-vars (make-hash-table :test 'equal)))
+    (goto-char (point-max))
+    (insert (format "Dir: %s\nVariable: %s\nValue: %s\n\n" dir var (pp-to-string val)))
+    (puthash dir (plist-put (gethash dir eopengrok-hashtab-vars nil) var val)
+             eopengrok-hashtab-vars)))
+
+(defun eopengrok-get-workspace-value (dir var)
+  (unless (file-directory-p dir)
+    (error "Dir %s is not exist" dir))
+  (setq dir (file-truename dir))
+  (with-current-buffer (eopengrok-global-command-buffer)
+    (when (boundp 'eopengrok-hashtab-vars)
+      (plist-get (gethash dir eopengrok-hashtab-vars nil) var))))
+
+(defun eopengrok-get-workspace-name (dir type)
+  (let ((workspace (cu-dir-to-sha1 (file-truename dir))))
+    (case type
+      (:index-process (format "opengrok-indexer[%s]" workspace))
+      (:index-buffer (format "*opengrok-indexer[%s]*" workspace))
+      (:search-process (format "opengrok-searcher[%s]" workspace))
+      (:search-buffer (format "*opengrok-searcher[%s]*" workspace))
+      (t "invalid"))))
+
+(defun eopengrok-workspace-name-p (name type)
+  (case type
+    (:index-process (cu-seq-starts-with name "opengrok-indexer"))
+    (:index-buffer (cu-seq-starts-with name "*opengrok-indexer"))
+    (:search-process (cu-seq-starts-with name "opengrok-searcher"))
+    (:search-buffer (cu-seq-starts-with name "*opengrok-searcher"))
+    (t nil)))
+
+(defun eopengrok-current-searcher ()
+  (unless (boundp 'eopengrok-cwd)
+    (error "eopengrok-cwd is not bound"))
+  (get-buffer-process (eopengrok-get-workspace-name eopengrok-cwd :search-buffer)))
+
+(defun eopengrok-current-search-buffer ()
+  (unless (boundp 'eopengrok-cwd)
+    (error "eopengrok-cwd is not bound"))
+  (eopengrok-get-workspace-name eopengrok-cwd :search-buffer))
+
+(defconst eopengrok-script-name "opengrok.sh")
 (defconst eopengrok-history-regexp
   "^\\([[:lower:][:upper:]]?:?.*?\\)::[ \t]+\\(\\w+\\)\\(.*\\)")
 
 (defconst eopengrok-source-regexp
-  "^\\([[:lower:][:upper:]]?:?.*?\\):\\([0-9]+\\):\\(.*\\)")
+  "^\\([[:lower:][:upper:]]?:?.*?\\):\\([0-9]+\\) \\[\\(.*\\)\\]")
 
-(defconst eopengrok-page-separator-regexp
-  "^clj-opengrok> \\([0-9]+\\)/\\([0-9]+\\)")
+(defconst eopengrok-file-regexp
+  "^\\([[:lower:][:upper:]]?:?.*?\\):\\(.*\\)")
+
+(defconst eopengrok-collect-the-rest
+  "^Collect the rest (y/n).*")
 
 (defgroup eopengrok nil
   "Opengrok interface for emacs."
@@ -85,6 +138,32 @@
   :group 'eopngrok
   :type 'string)
 
+(defcustom eopengrok-ignore-list
+  '("d:.opengrok"
+    "d:out"
+    "d:.out"
+    "d:output"
+    "d:.scripts"
+    "d:.repo"
+    "d:.log"
+    "d:.git"
+    "f:*.so"
+    "f:*.a"
+    "f:*.o"
+    "f:*.gz"
+    "f:*.bz2"
+    "f:*.tgz"
+    "f:*.tar.gz"
+    "f:*.zip"
+    "f:*.jar"
+    "f:*.class"
+    "f:*.elc"
+    "f:*.bin"
+    "f:*.elf")
+  "Ignore file or directory list."
+  :group 'eopngrok
+  :type 'string)
+
 (defface eopengrok-file-face
   '((t :inherit font-lock-function-name-face))
   "Face for files."
@@ -108,8 +187,8 @@
 (defun eopengrok-resume ()
   "Resume *eopengrok* buffer."
   (interactive)
-  (when (get-buffer eopengrok-buffer)
-    (pop-to-buffer eopengrok-buffer)))
+  (when (get-buffer (eopengrok-current-search-buffer))
+    (pop-to-buffer (eopengrok-current-search-buffer))))
 
 (defun eopengrok-quit ()
   "Quit eopengrok-mode."
@@ -121,19 +200,188 @@
       (sleep-for 0.1))
     (kill-buffer buf)))
 
-(defun eopengrok--get-configuration ()
-  "Search for Project configuration.xml."
-  (let* ((start-dir (expand-file-name default-directory))
-         (index-dir (locate-dominating-file start-dir eopengrok-configuration)))
-    (if index-dir
-        (concat (expand-file-name index-dir) eopengrok-configuration)
-      (user-error "Can't find configuration.xml"))))
+(defun eopengrok-visit-project-root ()
+  (interactive)
+  (find-file (car (eopengrok--get-configuration))))
 
-(defun eopengrok--search-option (conf text option symbol)
+(defun eopengrok-get-source-config-alist ()
+  (interactive)
+  (mapcar
+   (lambda (dir)
+     (cons (file-chase-links
+            (cu-join-path eopengrok-database-root-dir dir "source"))
+           (cu-join-path eopengrok-database-root-dir dir)))
+   (cddr (directory-files eopengrok-database-root-dir))))
+
+(with-eval-after-load "init-work-with-repo"
+
+  (defun eopengrok-get-repo-list (dir)
+    (unless (file-exists-p dir)
+      (error "Dir %s is not exist!" dir))
+    (let* ((repo-list-file (cu-join-path dir ".repo-projects.el"))
+           (file-exists (file-exists-p repo-list-file))
+           (buf (find-file-noselect repo-list-file)))
+      (with-current-buffer buf
+        (if file-exists
+            (prog2
+                (goto-char (point-min))
+                (read (current-buffer))
+              (kill-buffer))
+          (erase-buffer)
+          (let ((lst (gen-repo-list dir)))
+            (pp lst buf)
+            (basic-save-buffer)
+            (kill-buffer)
+            lst)))))
+
+  (defun eopengrok-get-current-narrowed-project ()
+    (interactive)
+    (let* ((source-conf-cons (eopengrok--get-configuration))
+           (dir nil)
+           (bufname nil)
+           (buf nil))
+      (if source-conf-cons
+          (eopengrok-get-workspace-value (car source-conf-cons) :narrow-to-project)
+        (message "Not in a project")
+        nil)))
+
+  (defun eopengrok-narrow-to-project (&optional no-repo)
+    (interactive)
+    (let* ((source-conf-cons (eopengrok--get-configuration))
+           (dir nil))
+      (unless source-conf-cons
+        (error "no project for current working directory"))
+      (setq dir (car source-conf-cons))
+      (unless no-repo
+        (when (file-exists-p (cu-join-path dir ".repo"))
+          (eopengrok-set-workspace-var
+           dir :narrow-to-project
+           (ido-completing-read
+            "Choose a directory: "
+            (mapcar 'car (eopengrok-get-repo-list (expand-file-name dir))))))))))
+
+
+(defconst eopengrok-file-link-map
+  (let ((map (make-sparse-keymap)))
+    (define-key map [mouse-1] #'cu-open-link)
+    (define-key map (kbd "RET") #'cu-open-link)
+    (define-key map "\C-j" #'cu-open-link)
+    map))
+
+(defun eopengrok-list-projects ()
+  (interactive)
+  (let ((buf (get-buffer-create "*eopengrok-project-list*")))
+    (with-current-buffer buf
+      (read-only-mode -1)
+      (erase-buffer)
+      (dolist (lst (eopengrok-get-source-config-alist))
+        (insert (propertize (concat (car lst) ":\n")
+                            'face 'eopengrok-source-face
+                            'keymap eopengrok-file-link-map)
+                (propertize (concat  "\t" (cdr lst) "\n")
+                            'face 'eopengrok-source-face
+                            'keymap eopengrok-file-link-map))))
+    (switch-to-buffer buf)
+    (read-only-mode)))
+
+(defvar eopengrok-default-project-alist-from-database nil
+  "default project alist from database")
+
+(defun* eopengrok-has-database-source-of-dir (dir)
+  (let ((ret))
+    (dolist (lst (eopengrok-get-source-config-alist))
+      (when (string-match-p (file-truename (car lst)) (expand-file-name dir))
+        (return-from eopengrok-has-database-source-of-dir (cdr lst))))
+    ret))
+
+(defun* eopengrok-was-symbol-linked-under-a-project (dir)
+  (let ((ret))
+    (dolist (lst (eopengrok-get-source-config-alist))
+      (when (cu-search-child-symlink-recursively-in
+             (file-truename (cu-join-path (cdr lst) "source")) dir 1)
+        (return-from eopengrok-was-symbol-linked-under-a-project (cdr lst))))
+    ret))
+
+(defun* eopengrok--get-configuration ()
+  "Search for Project configuration.xml.
+Return CONS of paths: (ROOT . CONFIGURATION)"
+  (interactive)
+  (let ((exist-and-configuration-exist-p
+         (lambda (dir)
+           (when (and dir (file-directory-p dir))
+             (when (file-exists-p (cu-join-path dir eopengrok-configuration))
+               (cons
+                (file-truename (cu-join-path dir "source"))
+                (cu-join-path dir eopengrok-configuration))))))
+        (cwd (file-truename default-directory)))
+    (or (funcall exist-and-configuration-exist-p
+                 (cu-find-nearest-ancestor-link-in
+                  eopengrok-database-root-dir cwd))
+        ;; The source code project itself is a symbol link.
+        (funcall exist-and-configuration-exist-p
+                 (eopengrok-has-database-source-of-dir cwd))
+        ;; The project has no opengrok indexed database, however it was
+        ;; symbolinked to an already indexed project.
+        ;; So we can use that project to search the files.
+        (funcall exist-and-configuration-exist-p
+                 (eopengrok-was-symbol-linked-under-a-project cwd))
+        nil)))
+
+(defvar eopengrok-search-current-project nil
+  "Get the narrow project if in a repo project")
+
+(defun eopengrok-toggle-narrow-to-current-project ()
+  (interactive)
+  (setq eopengrok-search-current-project (not eopengrok-search-current-project)))
+
+(defun eopengrok-get-narrow-project (&optional dir)
+  (interactive)
+  (unless dir (setq dir default-directory))
+  (let* ((source-conf-cons (eopengrok--get-configuration))
+         (repo-dir nil)
+         (project-list nil)
+         (project nil))
+    (unless source-conf-cons
+      (error "no project for current working directory"))
+    (setq repo-dir (car source-conf-cons))
+    (unless (file-exists-p (cu-join-path repo-dir ".repo"))
+      (setq repo-dir nil))
+    (unless repo-dir
+      (error "you can only narrow to project in repo project"))
+    (setq project-list (mapcar
+                        'car
+                        (eopengrok-get-repo-list (expand-file-name repo-dir))))
+    (dolist (proj project-list)
+      ;; (message "%s %s" (expand-file-name dir) (cu-join-path repo-dir proj))
+      (when (and (string-prefix-p
+                  (cu-join-path repo-dir proj)
+                  (expand-file-name dir))
+                 (> (length proj) (length project)))
+        (setq project proj)))
+    (unless project
+      (error "Can't find repo project"))
+    (when (called-interactively-p 'interactive)
+      (message "Found narrowed project: %s" project))
+    project))
+
+(defun eopengrok--search-option (conf text option symbol dir)
   "Opengrok search option list with CONF TEXT OPTION SYMBOL."
   (if (eq symbol 'custom)
       (-flatten (list "search" "-R" conf (split-string text " " t)))
-    (list "search" "-R" conf option text)))
+    (let ((key "search")
+          (narrowed-project nil))
+      (when (equal "-f" option)
+        (setq key "search_full_text"
+              text (format "\"%s\"" text)))
+      (if eopengrok-search-current-project
+          (setq narrowed-project (eopengrok-get-narrow-project default-directory))
+          (setq narrowed-project
+                (eopengrok-get-workspace-value dir :narrow-to-project)))
+      (when (and (stringp narrowed-project) (string-empty-p narrowed-project))
+        (setq narrowed-project nil))
+      (setq narrowed-project
+            (and narrowed-project (list "-p" narrowed-project)))
+      (-flatten (list key "-R" conf option text narrowed-project)))))
 
 (defmacro eopengrok--properties-region (props &rest body)
   "Add PROPS and Execute BODY to all the text it insert."
@@ -149,7 +397,7 @@
 
 (defun eopengrok--show-source ()
   "Display original source."
-  (with-current-buffer eopengrok-buffer
+  (with-current-buffer (eopengrok-current-search-buffer)
     (-when-let* (((file number) (eopengrok--get-properties (point))))
       (let* ((buffer (find-file-noselect file))
              (window (display-buffer buffer)))
@@ -184,7 +432,7 @@
 (defun eopengrok-next-line ()
   "Move point to the next search result, if one exists."
   (interactive)
-  (with-current-buffer eopengrok-buffer
+  (with-current-buffer (eopengrok-current-search-buffer)
     (-when-let (pos (next-single-property-change
                      (save-excursion (end-of-line) (point)) :info))
       (goto-char pos)
@@ -195,7 +443,7 @@
 (defun eopengrok-previous-line ()
   "Move point to the previous search result, if one exists."
   (interactive)
-  (with-current-buffer eopengrok-buffer
+  (with-current-buffer (eopengrok-current-search-buffer)
     (-when-let (pos (previous-single-property-change
                      (save-excursion (beginning-of-line) (point)) :info))
       (goto-char pos)
@@ -255,6 +503,27 @@
     (define-key map [mouse-1] #'eopengrok--handle-mouse)
     map))
 
+(defun eopengrok--file-line-properties (file rest)
+  "Decorate File link."
+  (let* ((file (propertize file 'face 'eopengrok-file-face))
+         (info (propertize " "
+                           'face 'eopengrok-info-face
+                           'mouse-face 'highlight
+                           'keymap eopengrok-mouse-map))
+         (proc (eopengrok-current-searcher)))
+    (eopengrok--properties-region
+     (list :page eopengrok-page)
+     (eopengrok--properties-region
+      (list :name (expand-file-name file)
+            :info (string-to-number info))
+      (insert info))
+     (progn
+       (unless (string= file eopengrok-last-filename)
+         (insert file)
+         (eopengrok--abbreviate-file file))
+       (insert (format "%s\n" rest))
+       (setq eopengrok-last-filename file)))))
+
 (defun eopengrok--line-properties (line-list &optional history)
   "Decorate LINE-LIST with HISTORY."
   (-when-let* (((file info src) line-list)
@@ -265,7 +534,7 @@
                                  'keymap eopengrok-mouse-map))
                (src (propertize (eopengrok--remove-html-tags src)
                                 'face 'eopengrok-source-face))
-               (proc (get-process "eopengrok")))
+               (proc (eopengrok-current-searcher)))
     (eopengrok--properties-region
      (list :page eopengrok-page)
      (progn
@@ -282,7 +551,7 @@
        (insert "\n")
        (setq eopengrok-last-filename file)))))
 
-(defun eopengrok--insert-line (line)
+(defun eopengrok--insert-line (line process)
   "Insert matching any regex in LINE."
   (cond
    ((string-match eopengrok-history-regexp line)
@@ -291,10 +560,11 @@
    ((string-match eopengrok-source-regexp line)
     (eopengrok--line-properties
      (mapcar (lambda (n) (match-string n line)) '(1 2 3))))
-   ((string-match eopengrok-page-separator-regexp line)
-    (setq eopengrok-mode-line-status 'running
-          eopengrok-page (format "%s/%s" (match-string 1 line)
-                                 (match-string 2 line))))
+   ((and (string-match eopengrok-file-regexp line) (file-exists-p (match-string 1 line)))
+    (eopengrok--file-line-properties
+     (match-string 1 line) (match-string 2 line)))
+   ((string-match eopengrok-collect-the-rest line)
+    (process-send-string process "y\n"))
    (t (insert line "\n"))))
 
 (defun eopengrok--process-filter (process output)
@@ -309,20 +579,60 @@
             (setq pos (match-end 0))
             (goto-char (point-max))
             ;;(insert line "\n")
-            (eopengrok--insert-line line))))
+            (eopengrok--insert-line line process))))
       (setq eopengrok-pending-output (substring output pos)))))
 
+(defun eopengrok-use-newer-index-file (index-dir)
+  (interactive "P")
+  (unless index-dir
+    (setq index-dir (cdr (eopengrok--get-configuration)))
+    (when index-dir (setq index-dir
+                          (substring index-dir 0
+                                     (- (length "/.opengrok/configuration.xml"))))))
+  (unless (and index-dir (file-exists-p index-dir))
+    (error "no project database directory found"))
+
+  (unless (file-exists-p (format "%s.new" index-dir))
+    (error "new database is not exist"))
+
+  (let* ((command-swap (format "mv %s %s.old && mv %s.new %s"
+                               index-dir
+                               index-dir
+                               index-dir
+                               index-dir))
+         (command-delete-old (format "rm -rf %s.old" index-dir)))
+    (message "Start to swap index directories: {%s}" command-swap)
+    (if (equal (shell-command command-swap) 0)
+        (progn
+          (message "Swap success, start to replace the path in configuration")
+          (let ((config-buf (find-file-noselect
+                             (cu-join-path
+                              index-dir
+                              ".opengrok/configuration.xml"))))
+            (with-current-buffer config-buf
+              (mark-whole-buffer)
+              (replace-string (concat index-dir ".new") index-dir)
+              (save-buffer)
+              (kill-buffer)))
+          (message "Start to delete old directory: {%s}" command-delete-old)
+          (async-shell-command command-delete-old))
+      (message "Failed to swap directories!"))))
+
 (defun eopengrok--process-sentinel (process event)
   "Handle eopengrok PROCESS EVENT."
   (let ((buf (process-buffer process)))
     (with-current-buffer buf
       (cond ((string= "killed\n" event)
-             (kill-buffer buf))
+              (kill-buffer buf))
             ((string= "finished\n" event)
-             (setq eopengrok-mode-line-status 'finished))
+             (setq eopengrok-mode-line-status 'finished)
+             (unless (eopengrok-workspace-name-p (buffer-name buf) :search-buffer)
+               (when (and (boundp 'eopengrok-old-index-dir) eopengrok-old-index-dir)
+                 (eopengrok-use-newer-index-file eopengrok-old-index-dir))
+               (kill-buffer buf)))
             (t nil)))))
 
-(defun eopengrok--current-info (process dir &optional search text ep)
+(defun eopengrok--current-info (process dir &optional search text ep inhabit-pop-buffer)
   "Display current information (PROCESS DIR SEARCH TEXT EP)."
   (let ((buf (process-buffer process)))
     (with-current-buffer buf
@@ -335,7 +645,8 @@
         (forward-line -2))
       (setq truncate-lines t)
       (setq buffer-read-only t)
-      (pop-to-buffer buf))))
+      (unless inhabit-pop-buffer
+        (pop-to-buffer buf)))))
 
 (defun eopengrok--init ()
   "Initialize variable."
@@ -349,29 +660,40 @@
   (let ((fun (intern (format "eopengrok-find-%s" sym)))
         (doc (format "Find option %s" option))
         (str (format "Find %s: " sym)))
-    `(defun ,fun (text) ,doc
-            (interactive (list (read-string ,str (thing-at-point 'symbol))))
-            (let ((proc (get-process "eopengrok")))
-              (when proc
-                (kill-process proc)
-                (sleep-for 0.1)))
-            (let* ((conf (eopengrok--get-configuration))
-                   (proc (apply 'start-process
-                                "eopengrok"
-                                eopengrok-buffer
-                                "clj-opengrok"
-                                (eopengrok--search-option conf text
-                                                          ,option ',sym))))
-              (set-process-query-on-exit-flag proc nil)
-              (set-process-filter proc 'eopengrok--process-filter)
-              (set-process-sentinel proc 'eopengrok--process-sentinel)
-              (process-put proc :text text)
-              (with-current-buffer eopengrok-buffer
-                (eopengrok-mode t)
-                (eopengrok--init)
-                (eopengrok--current-info
-                 proc (s-chop-suffix eopengrok-configuration conf)
-                 t (concat ,str text)))))))
+    `(defun ,fun () ,doc
+            (interactive)
+            (let* ((source-conf-cons (eopengrok--get-configuration))
+                   (dir (if (not source-conf-cons)
+                            (user-error "No Configuration found for %s" default-directory)
+                            (car source-conf-cons)))
+                   (conf (cdr source-conf-cons))
+                   (proc (eopengrok-get-workspace-name dir :search-process))
+                   (text (read-string ,str (thing-at-point 'symbol))))
+              (when (process-live-p (get-process proc))
+                (kill-process (get-process proc))
+                (sleep-for 0.1))
+              (let* ((last-search-command
+                      (-flatten
+                       (list
+                        (eopengrok-get-workspace-name dir :search-process)
+                        (eopengrok-get-workspace-name dir :search-buffer)
+                        eopengrok-script-name
+                        (eopengrok--search-option conf text ,option ',sym dir))))
+                     (proc nil))
+                (eopengrok-set-workspace-var
+                 dir :last-search-command last-search-command)
+                (setq proc (apply 'start-process last-search-command))
+                (set-process-query-on-exit-flag proc nil)
+                (set-process-filter proc 'eopengrok--process-filter)
+                (set-process-sentinel proc 'eopengrok--process-sentinel)
+                (process-put proc :text text)
+                (with-current-buffer (eopengrok-get-workspace-name dir :search-buffer)
+                  (eopengrok-mode t)
+                  (eopengrok--init)
+                  (setq-local eopengrok-cwd dir)
+                  (eopengrok--current-info
+                   proc (s-chop-suffix eopengrok-configuration conf)
+                   t (concat ,str text))))))))
 
 (eopengrok-define-find definition "-d")
 (eopengrok-define-find file "-p")
@@ -380,31 +702,82 @@
 (eopengrok-define-find history "-h")
 (eopengrok-define-find custom "")
 
-(defun eopengrok-create-index (dir &optional enable-projects-p)
-  "Create an Index file in DIR, ENABLE-PROJECTS-P is flag for enable projects.
-If not nil every directory in DIR is considered a separate project."
+(defconst eopengrok-database-root-dir (expand-file-name "~/.opengrok-data-base")
+  "The default directory for the opengrok database")
+
+(when (not (file-exists-p eopengrok-database-root-dir))
+  (make-directory eopengrok-database-root-dir))
+
+(defun create-database-dir-if-not-exist (dir swap-mode)
+  (when (not (file-directory-p dir))
+    (error "%s is not a directory" dir))
+  (let* ((sha1-dir (cu-dir-to-sha1 dir))
+         (absolute-path-sha1-dir
+          (cu-join-path eopengrok-database-root-dir sha1-dir))
+         (old-dir nil)
+         (source-dir nil))
+    (when (and swap-mode (file-exists-p absolute-path-sha1-dir))
+      (setq old-dir absolute-path-sha1-dir)
+      (setq absolute-path-sha1-dir (concat old-dir ".new"))
+      (when (file-exists-p absolute-path-sha1-dir)
+        (if (y-or-n-p (format "Remove %s first?" absolute-path-sha1-dir))
+            (shell-command (format "rm -rf %s" absolute-path-sha1-dir))
+          (error "You should remove %s or swap it first!" absolute-path-sha1-dir))))
+    (make-directory absolute-path-sha1-dir t)
+    (setq source-dir (cu-join-path absolute-path-sha1-dir "source"))
+    (make-symbolic-link dir source-dir t)
+    (list (file-chase-links source-dir) absolute-path-sha1-dir old-dir)))
+
+(defvar eopengrok-create-index-quite-mode t
+  "crate index as quiet as possible")
+
+(defvar eopengrok-swap-mode nil
+  "Create in new space and swap only")
+
+(defun eopengrok-toggle-swap-mode ()
+  (interactive)
+  (setq eopengrok-swap-mode (not eopengrok-swap-mode)))
+
+(defconst eopengrok-enable-projects-p nil
+  "If enabled, every project in the root directory will be considered as a separate project")
+
+(defun eopengrok-create-index (dir &optional sentinel inhabit-pop-buffer)
+  "Create an Index file in DIR, optionally the caller can pass in a customized SENTINEL"
   (interactive "DRoot directory: ")
-  (let ((proc (apply 'start-process
-                     "eopengrok-indexer"
-                     eopengrok-indexing-buffer
-                     "clj-opengrok"
-                     (append (list "index" "-s" (expand-file-name dir))
-                             (list "-i" eopengrok-ignore-file-or-directory)
-                             (when enable-projects-p '("-e"))))))
+  (let* ((dir (file-truename dir))
+         (old-index-dir nil)
+         (index-buffer-name (eopengrok-get-workspace-name dir :index-buffer))
+         (proc (apply 'start-process
+                      (eopengrok-get-workspace-name dir :index-process)
+                      index-buffer-name
+                      eopengrok-script-name
+                      (append (list "index")
+                              (when eopengrok-create-index-quite-mode
+                                (list "-q"))
+                              (let ((source-dir-pair (create-database-dir-if-not-exist dir eopengrok-swap-mode)))
+                                (setq old-index-dir (caddr source-dir-pair))
+                                (list "-s" (car source-dir-pair)
+                                      "-d" (cu-join-path (cadr source-dir-pair) ".opengrok")
+                                      "-W" (cu-join-path (cadr source-dir-pair) eopengrok-configuration)))
+                              (seq-reduce
+                               (lambda (init ele)
+                                 (if (and (stringp ele) (not (equal ele "")))
+                                     (append (list "-i" ele) init)
+                                   init))
+                               eopengrok-ignore-list
+                               nil)
+                              (when eopengrok-enable-projects-p '("-e"))))))
     (set-process-filter proc 'eopengrok--process-filter)
-    (set-process-sentinel proc 'eopengrok--process-sentinel)
-    (with-current-buffer eopengrok-indexing-buffer
+    (set-process-sentinel proc (or sentinel 'eopengrok--process-sentinel))
+    (with-current-buffer index-buffer-name
       (eopengrok-mode t)
       (eopengrok--init)
+      (setq-local eopengrok-cwd dir)
+      (setq-local eopengrok-old-index-dir old-index-dir)
       (eopengrok--current-info proc (expand-file-name dir)
-                               nil nil enable-projects-p)
+                               nil nil eopengrok-enable-projects-p inhabit-pop-buffer)
       (setq eopengrok-mode-line-status 'running))))
 
-(defun eopengrok-create-index-with-enable-projects (dir)
-  "Create an Index file, every directory in DIR is considered a separate project."
-  (interactive "DRoot directory (enable projects): ")
-  (eopengrok-create-index dir t))
-
 (defvar eopengrok-mode-map nil
   "Keymap for eopengrok minor mode.")
 
-- 
2.17.2 (Apple Git-113)

